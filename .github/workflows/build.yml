name: build

on:
  schedule:
    - cron: "42 6 * * *"

  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      tag: ${{ steps.result.outputs.tag }}

    steps:
      - name: Get upstream tag
        id: upstream-tag
        run: |
          result=$(gh release list --repo vim/vim-win32-installer --limit 1 --exclude-drafts --json tagName --jq '.[] |.tagName')

          if [ $? -ne 0 ]
          then
            exit $?
          fi

          echo $result

          echo "tag=$result" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Get downstream tag
        id: downstream-tag
        run: |
          result=$(gh release list --repo ${{ github.repository_owner }}/${{ github.event.repository.name }} --limit 1 --exclude-drafts --json tagName --jq '.[] |.tagName')

          if [ $? -ne 0 ]
          then
            exit $?
          fi

          echo $result

          echo "tag=$result" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Result
        id: result
        shell: pwsh
        run: |
          $upstreamVersion = [Version]::new('${{ steps.upstream-tag.outputs.tag }}'.TrimStart('v'))

          if ('${{ steps.downstream-tag.outputs.tag }}')
          {
            $downstreamVersion = [Version]::new('${{ steps.downstream-tag.outputs.tag }}'.TrimStart('v'))
          }
          else
          {
            $downstreamVersion = [Version]::new()
          }

          if ($upstreamVersion -gt $downstreamVersion)
          {
            echo 'Build is required.'
            "tag=${{ steps.upstream-tag.outputs.tag }}" >> $env:GITHUB_OUTPUT
          }
          else
          {
            echo 'Build not required.'
          }

  build:
    runs-on: windows-latest
    timeout-minutes: 20
    needs: check
    if: needs.check.outputs.tag != ''

    steps:
      - uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          $tag = "${{ needs.check.outputs.tag }}".TrimStart("v")
          $version = [version]::new($tag)
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "versionMajor=$($version.Major)" >> $env:GITHUB_OUTPUT
          echo "versionMinor=$($version.Minor)" >> $env:GITHUB_OUTPUT
          echo "versionBuild=$($version.Build)" >> $env:GITHUB_OUTPUT

      - name: Setup wix
        run: |
          dotnet.exe tool install --global wix --version 6.0.0 --verbosity diag

          wix.exe extension add WixToolset.UI.wixext/6.0.0 --global
          wix.exe extension add WixToolset.Util.wixext/6.0.0 --global
          wix.exe extension list --global

      - name: Download vim
        run: gh.exe release download ${{ needs.check.outputs.tag }} --pattern '*_x64.zip' --repo vim/vim-win32-installer
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract vim
        run: Expand-Archive -Path '*_x64.zip' -DestinationPath build -ErrorAction Stop

      - name: Prepare vim
        run: |
          Remove-Item ./build/vim/vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}/GvimExt32/GvimExt.reg -Force -ErrorAction Stop
          Remove-Item ./build/vim/vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}/GvimExt32/README.txt -Force -ErrorAction Stop
          Remove-Item ./build/vim/vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}/GvimExt64/GvimExt.reg -Force -ErrorAction Stop
          Remove-Item ./build/vim/vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}/GvimExt64/README.txt -Force -ErrorAction Stop
          Remove-Item ./build/vim/vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}/install.exe -Force -ErrorAction Stop
          Remove-Item ./build/vim/vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}/uninstall.exe -Force -ErrorAction Stop
          Remove-Item ./build/vim/vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}/uninstall.txt -Force -ErrorAction Stop
          Remove-Item ./build/vim/vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}/*.desktop -Force -ErrorAction Stop

      - name: Build msi
        run: |
          wix.exe `
            build `
            -arch x64 `
            -src src\Product.wxs `
            -d ProductSource="$(Resolve-Path 'build\vim\vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}')" `
            -d SrcDirectory="$(Resolve-Path 'src')" `
            -d ProductVersion="${{ steps.version.outputs.version }}" `
            -d ProductVersionMajor="${{ steps.version.outputs.versionMajor }}" `
            -d ProductVersionMinor="${{ steps.version.outputs.versionMinor }}" `
            -ext WixToolset.UI.wixext `
            -ext WixToolset.Util.wixext `
            -out vim.msi

      - name: Validate msi
        run: wix.exe msi validate vim.msi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vim-msi
          path: ./vim.msi
          if-no-files-found: error

      - name: Test installer
        run: |
          $process = Start-Process msiexec.exe -ArgumentList '/i','vim.msi','/qn' -Wait -NoNewWindow -PassThru -ErrorAction Stop
          if ($process.ExitCode -ne 0)
          {
              throw 'Non zero exit code: "{0}".' -f $process.ExitCode
          }

          $path = Join-Path $env:ProgramFiles 'vim\vim${{ steps.version.outputs.versionMajor }}${{ steps.version.outputs.versionMinor }}\vim.exe' -Resolve -ErrorAction Stop
          & $path --version

      - name: Publish release
        run: gh.exe release create ${{ needs.check.outputs.tag }} --notes 'Vim Windows x64 build packaged as an msi.' vim.msi
        env:
          # Requires a personal access token with a fine-grained permission of contents:read/write.
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
